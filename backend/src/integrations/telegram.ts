import TelegramBot from 'node-telegram-bot-api';
import { config } from '@/config/env';
import { logger } from '@/utils/logger';
import { TelegramMessage, TelegramUser } from '@/types';

export class TelegramService {
  private bot: TelegramBot;
  private webhookSet = false;

  constructor() {
    this.bot = new TelegramBot(config.telegram.botToken, {
      polling: !config.telegram.webhookUrl,
      webHook: !!config.telegram.webhookUrl,
    });

    this.setupCommands();
    this.setupEventHandlers();
  }

  /**
   * Setup bot commands
   */
  private async setupCommands() {
    try {
      await this.bot.setMyCommands([
        { command: '/start', description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
        { command: '/help', description: '–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º' },
        { command: '/search', description: '–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π' },
        { command: '/applications', description: '–ú–æ–∏ –æ—Ç–∫–ª–∏–∫–∏' },
        { command: '/settings', description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞' },
        { command: '/stats', description: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∫–ª–∏–∫–æ–≤' },
        { command: '/stop', description: '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–ø–æ–∏—Å–∫' },
      ]);

      logger.info('Telegram bot commands set successfully');
    } catch (error) {
      logger.error('Failed to set Telegram bot commands:', error);
    }
  }

  /**
   * Setup event handlers
   */
  private setupEventHandlers() {
    // Handle /start command
    this.bot.onText(/\/start/, async (msg) => {
      const chatId = msg.chat.id;
      const user = msg.from;

      logger.info('User started bot interaction', { chatId, user });

      const welcomeMessage = `ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø Jobora - —Ç–≤–æ–π –ò–ò –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–∏—Å–∫—É —Ä–∞–±–æ—Ç—ã –Ω–∞ hh.ru

–ß—Ç–æ —è —É–º–µ—é:
‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–∫–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
‚úÖ –°–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∏—Å—å–º–∞
‚úÖ –ü–æ–¥–∞–≤–∞—Ç—å –æ—Ç–∫–ª–∏–∫–∏ –∑–∞ —Ç–µ–±—è
‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç–∫–ª–∏–∫–æ–≤
‚úÖ –£–≤–µ–¥–æ–º–ª—è—Ç—å –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –æ—Ç —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–≤

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ:
1. –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ hh.ru (/auth)
2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ (/settings)
3. –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–ø–æ–∏—Å–∫ (/search)

–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥.`;

      await this.sendMessage(chatId, welcomeMessage, {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è HH.ru', callback_data: 'auth_hh' },
              { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'settings' },
            ],
            [
              { text: 'üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫', callback_data: 'start_search' },
              { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' },
            ],
          ],
        },
      });
    });

    // Handle /help command
    this.bot.onText(/\/help/, async (msg) => {
      const chatId = msg.chat.id;

      const helpMessage = `üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

üè† –û—Å–Ω–æ–≤–Ω—ã–µ:
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:
/auth - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ hh.ru
/profile - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è

üîç –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã:
/search - –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞
/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–ø–æ–∏—Å–∫

üìã –û—Ç–∫–ª–∏–∫–∏:
/applications - –°–ø–∏—Å–æ–∫ –æ—Ç–∫–ª–∏–∫–æ–≤
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üí¨ –°–æ–æ–±—â–µ–Ω–∏—è:
/messages - –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–≤

‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/feedback - –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å`;

      await this.sendMessage(chatId, helpMessage);
    });

    // Handle /search command
    this.bot.onText(/\/search(?:\s+(.+))?/, async (msg, match) => {
      const chatId = msg.chat.id;
      const searchQuery = match?.[1];

      if (searchQuery) {
        await this.handleJobSearch(chatId, msg.from!, searchQuery);
      } else {
        await this.sendSearchKeyboard(chatId);
      }
    });

    // Handle /applications command
    this.bot.onText(/\/applications/, async (msg) => {
      const chatId = msg.chat.id;
      await this.handleApplicationsList(chatId, msg.from!);
    });

    // Handle /settings command
    this.bot.onText(/\/settings/, async (msg) => {
      const chatId = msg.chat.id;
      await this.sendSettingsKeyboard(chatId);
    });

    // Handle /stats command
    this.bot.onText(/\/stats/, async (msg) => {
      const chatId = msg.chat.id;
      await this.handleStats(chatId, msg.from!);
    });

    // Handle callback queries
    this.bot.on('callback_query', async (query) => {
      const chatId = query.message!.chat.id;
      const data = query.data!;
      const user = query.from;

      await this.bot.answerCallbackQuery(query.id);
      await this.handleCallbackQuery(chatId, user, data);
    });

    // Handle text messages
    this.bot.on('message', async (msg) => {
      if (msg.text && !msg.text.startsWith('/')) {
        await this.handleTextMessage(msg);
      }
    });

    // Error handling
    this.bot.on('error', (error) => {
      logger.error('Telegram bot error:', error);
    });

    // Polling error handling
    this.bot.on('polling_error', (error) => {
      logger.error('Telegram polling error:', error);
    });
  }

  /**
   * Send search keyboard
   */
  private async sendSearchKeyboard(chatId: number) {
    const message = `üîç –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:`;

    await this.sendMessage(chatId, message, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üöÄ –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫', callback_data: 'quick_search' },
            { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–∏—Å–∫', callback_data: 'custom_search' },
          ],
          [
            { text: 'ü§ñ –ê–≤—Ç–æ–ø–æ–∏—Å–∫', callback_data: 'auto_search' },
            { text: 'üìã –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∏', callback_data: 'saved_searches' },
          ],
        ],
      },
    });
  }

  /**
   * Send settings keyboard
   */
  private async sendSettingsKeyboard(chatId: number) {
    const message = `‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏

–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å?`;

    await this.sendMessage(chatId, message, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üíº –ñ–µ–ª–∞–µ–º—ã–µ –ø–æ–∑–∏—Ü–∏–∏', callback_data: 'set_positions' },
            { text: 'üí∞ –ó–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è', callback_data: 'set_salary' },
          ],
          [
            { text: 'üåç –ì–æ—Ä–æ–¥–∞ –ø–æ–∏—Å–∫–∞', callback_data: 'set_locations' },
            { text: 'üìÖ –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã', callback_data: 'set_experience' },
          ],
          [
            { text: '‚è∞ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã', callback_data: 'set_schedule' },
            { text: 'üè¢ –¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏', callback_data: 'set_employment' },
          ],
          [
            { text: 'ü§ñ –ê–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–∏', callback_data: 'set_auto_apply' },
            { text: 'üìù –®–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞', callback_data: 'set_cover_letter' },
          ],
        ],
      },
    });
  }

  /**
   * Handle callback queries
   */
  private async handleCallbackQuery(chatId: number, user: TelegramUser, data: string) {
    switch (data) {
      case 'auth_hh':
        await this.handleAuthHH(chatId, user);
        break;
      case 'settings':
        await this.sendSettingsKeyboard(chatId);
        break;
      case 'start_search':
        await this.sendSearchKeyboard(chatId);
        break;
      case 'stats':
        await this.handleStats(chatId, user);
        break;
      case 'quick_search':
        await this.handleQuickSearch(chatId, user);
        break;
      case 'auto_search':
        await this.handleAutoSearch(chatId, user);
        break;
      default:
        if (data.startsWith('set_')) {
          await this.handleSettingChange(chatId, user, data);
        } else if (data.startsWith('apply_')) {
          await this.handleApplicationAction(chatId, user, data);
        }
        break;
    }
  }

  /**
   * Handle HH.ru authorization
   */
  private async handleAuthHH(chatId: number, user: TelegramUser) {
    // This will be implemented when we have the auth service
    const authUrl = `https://your-domain.com/api/auth/hh?telegram_id=${user.id}`;
    
    const message = `üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ HH.ru

–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ HH.ru.

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:`;

    await this.sendMessage(chatId, message, {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ HH.ru', url: authUrl }],
        ],
      },
    });
  }

  /**
   * Handle job search
   */
  private async handleJobSearch(chatId: number, user: TelegramUser, query: string) {
    const message = `üîç –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π: "${query}"

‚è≥ –ò—â—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏...`;

    const sentMessage = await this.sendMessage(chatId, message);

    // Here we would integrate with the job search service
    // For now, just show a placeholder response
    setTimeout(async () => {
      const resultMessage = `‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!

–ù–∞–π–¥–µ–Ω–æ: 15 –≤–∞–∫–∞–Ω—Å–∏–π
–ü–æ–¥—Ö–æ–¥—è—â–∏—Ö: 8 –≤–∞–∫–∞–Ω—Å–∏–π
–û—Ç–∫–ª–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: 5

üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–∏:
‚Ä¢ Frontend Developer - TechCorp LLC
‚Ä¢ React Developer - StartupTech
‚Ä¢ JavaScript Developer - Digital Agency

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /applications –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –æ—Ç–∫–ª–∏–∫–æ–≤.`;

      await this.editMessage(chatId, sentMessage.message_id, resultMessage);
    }, 3000);
  }

  /**
   * Handle applications list
   */
  private async handleApplicationsList(chatId: number, user: TelegramUser) {
    // This will be implemented with the applications service
    const message = `üìã –í–∞—à–∏ –æ—Ç–∫–ª–∏–∫–∏

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –°–µ–≥–æ–¥–Ω—è: 3 –æ—Ç–∫–ª–∏–∫–∞
‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: 15 –æ—Ç–∫–ª–∏–∫–æ–≤
‚Ä¢ –í—Å–µ–≥–æ: 142 –æ—Ç–∫–ª–∏–∫–∞

üîÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–∏:
‚úÖ Senior Frontend Developer - –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω
üëÅÔ∏è React Native Developer - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ  
üì§ Full Stack Developer - –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stats –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.`;

    await this.sendMessage(chatId, message, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'detailed_stats' },
            { text: 'üîç –ù–∞–π—Ç–∏ –Ω–æ–≤—ã–µ', callback_data: 'start_search' },
          ],
        ],
      },
    });
  }

  /**
   * Handle stats request
   */
  private async handleStats(chatId: number, user: TelegramUser) {
    const message = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∫–ª–∏–∫–æ–≤

üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è:
‚Ä¢ –û—Ç–∫–ª–∏–∫–∏: 3
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: 1
‚Ä¢ –û—Ç–≤–µ—Ç—ã: 1

üìà –ó–∞ –Ω–µ–¥–µ–ª—é:
‚Ä¢ –û—Ç–∫–ª–∏–∫–∏: 15
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: 8
‚Ä¢ –û—Ç–≤–µ—Ç—ã: 3
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: 1

üéØ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–∫–ª–∏–∫–æ–≤: 142
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–≤–µ—Ç–æ–≤: 15%
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞: 180,000 ‚ÇΩ

üî• –¢–æ–ø –∫–æ–º–ø–∞–Ω–∏–∏:
1. TechCorp LLC - 3 –æ—Ç–∫–ª–∏–∫–∞
2. StartupTech - 2 –æ—Ç–∫–ª–∏–∫–∞
3. Digital Agency - 2 –æ—Ç–∫–ª–∏–∫–∞`;

    await this.sendMessage(chatId, message);
  }

  /**
   * Handle quick search
   */
  private async handleQuickSearch(chatId: number, user: TelegramUser) {
    const message = `üöÄ –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫

–ó–∞–ø—É—Å–∫–∞—é –ø–æ–∏—Å–∫ —Å –≤–∞—à–∏–º–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏...

‚è≥ –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π...`;

    await this.sendMessage(chatId, message);
  }

  /**
   * Handle auto search toggle
   */
  private async handleAutoSearch(chatId: number, user: TelegramUser) {
    const message = `ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫

–°—Ç–∞—Ç—É—Å: ‚úÖ –í–∫–ª—é—á–µ–Ω
–ß–∞—Å—Ç–æ—Ç–∞: –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
–ú–∞–∫—Å–∏–º—É–º –æ—Ç–∫–ª–∏–∫–æ–≤ –≤ –¥–µ–Ω—å: 10

–ê–≤—Ç–æ–ø–æ–∏—Å–∫ –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–∞–≤–∞—Ç—å –æ—Ç–∫–ª–∏–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º.`;

    await this.sendMessage(chatId, message, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', callback_data: 'pause_auto_search' },
            { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å', callback_data: 'configure_auto_search' },
          ],
          [{ text: 'üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', callback_data: 'stop_auto_search' }],
        ],
      },
    });
  }

  /**
   * Handle setting changes
   */
  private async handleSettingChange(chatId: number, user: TelegramUser, setting: string) {
    const settingName = setting.replace('set_', '');
    
    const messages: Record<string, string> = {
      positions: 'üíº –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: Frontend Developer, React Developer, JavaScript Developer',
      salary: 'üí∞ –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –∑–∞—Ä–ø–ª–∞—Ç—É:\n\n–§–æ—Ä–º–∞—Ç: –æ—Ç-–¥–æ\n–ù–∞–ø—Ä–∏–º–µ—Ä: 150000-250000',
      locations: 'üåç –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫',
      experience: 'üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞:',
      schedule: '‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:',
      employment: 'üè¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏:',
      auto_apply: 'ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–æ–≤:',
      cover_letter: 'üìù –í–≤–µ–¥–∏—Ç–µ —à–∞–±–ª–æ–Ω —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞:',
    };

    await this.sendMessage(chatId, messages[settingName] || '–ù–∞—Å—Ç—Ä–æ–π–∫–∞...');
  }

  /**
   * Handle application actions
   */
  private async handleApplicationAction(chatId: number, user: TelegramUser, action: string) {
    const [, applicationId, actionType] = action.split('_');
    
    let message = '';
    switch (actionType) {
      case 'view':
        message = 'üëÅÔ∏è –û—Ç–∫—Ä—ã–≤–∞—é –≤–∞–∫–∞–Ω—Å–∏—é –Ω–∞ hh.ru...';
        break;
      case 'respond':
        message = 'üí¨ –û—Ç–∫—Ä—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞...';
        break;
      case 'hide':
        message = 'üö´ –°–∫—Ä—ã–≤–∞—é –≤–∞–∫–∞–Ω—Å–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞...';
        break;
    }

    await this.sendMessage(chatId, message);
  }

  /**
   * Handle text messages
   */
  private async handleTextMessage(msg: TelegramMessage) {
    const chatId = msg.chat.id;
    const text = msg.text!;

    // Handle different contexts based on the last action
    if (text.includes('@')) {
      // Might be setting email or something similar
      await this.sendMessage(chatId, '‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
    } else if (text.match(/\d+/)) {
      // Might be setting salary or other numeric value
      await this.sendMessage(chatId, 'üí∞ –ó–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
    } else {
      // General text - might be position search or setting
      await this.sendMessage(chatId, `üîç –ò—â—É –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${text}"`);
    }
  }

  /**
   * Set webhook for production
   */
  async setWebhook(url: string): Promise<boolean> {
    try {
      await this.bot.setWebHook(url);
      this.webhookSet = true;
      logger.info('Telegram webhook set successfully', { url });
      return true;
    } catch (error) {
      logger.error('Failed to set Telegram webhook:', error);
      return false;
    }
  }

  /**
   * Process webhook update
   */
  async processWebhookUpdate(update: any): Promise<void> {
    try {
      this.bot.processUpdate(update);
    } catch (error) {
      logger.error('Failed to process webhook update:', error);
    }
  }

  /**
   * Send message with error handling
   */
  async sendMessage(
    chatId: number,
    text: string,
    options?: any
  ): Promise<TelegramBot.Message> {
    try {
      return await this.bot.sendMessage(chatId, text, {
        parse_mode: 'HTML',
        disable_web_page_preview: true,
        ...options,
      });
    } catch (error) {
      logger.error('Failed to send Telegram message:', error);
      throw error;
    }
  }

  /**
   * Edit message with error handling
   */
  async editMessage(
    chatId: number,
    messageId: number,
    text: string,
    options?: any
  ): Promise<boolean | TelegramBot.Message> {
    try {
      return await this.bot.editMessageText(text, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        ...options,
      });
    } catch (error) {
      logger.error('Failed to edit Telegram message:', error);
      return false;
    }
  }

  /**
   * Send notification to user
   */
  async sendNotification(
    telegramUserId: string,
    title: string,
    message: string,
    buttons?: Array<{ text: string; callback_data: string }>
  ): Promise<boolean> {
    try {
      const fullMessage = `üîî ${title}\n\n${message}`;
      
      const options: any = { parse_mode: 'HTML' };
      
      if (buttons && buttons.length > 0) {
        options.reply_markup = {
          inline_keyboard: [buttons],
        };
      }

      await this.bot.sendMessage(parseInt(telegramUserId), fullMessage, options);
      return true;
    } catch (error) {
      logger.error('Failed to send notification:', error);
      return false;
    }
  }

  /**
   * Check if bot is healthy
   */
  async healthCheck(): Promise<boolean> {
    try {
      const me = await this.bot.getMe();
      return !!me.id;
    } catch (error) {
      logger.error('Telegram bot health check failed:', error);
      return false;
    }
  }
}